//------------------------------------------------------------------------------
// <autogenerated>
//     This Oxygene source code was generated by a tool.
//     Runtime Version: 4.0.30319.17020
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

{$HIDE H7}
{$HIDE W1}
{$HIDE W27}
{$HIDE H11}

namespace RemObjects.SDK.Push;

interface

uses
    System,
    System.Collections.Generic,
    RemObjects.SDK,
    RemObjects.SDK.Types;
    
type
    IApplePushProviderService = public interface(RemObjects.SDK.IROService)
        method registerDevice(deviceToken: RemObjects.SDK.Types.Binary; additionalInfo: System.String);
        method unregisterDevice(deviceToken: RemObjects.SDK.Types.Binary);
    end;
    
    
    ApplePushProviderService_Proxy = public partial class(RemObjects.SDK.Proxy, IApplePushProviderService)
    private 
        method get_InterfaceName: System.String;
    public 
        property InterfaceName: System.String read get_InterfaceName; override;
        constructor(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel);
        constructor(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel; interfaceName: System.String);
        constructor(remoteService: RemObjects.SDK.IRemoteService);
        constructor(remoteService: RemObjects.SDK.IRemoteService; interfaceName: System.String);
        constructor(uri: System.Uri);
        constructor(url: System.String);
        method registerDevice(deviceToken: RemObjects.SDK.Types.Binary; additionalInfo: System.String); virtual;
        method unregisterDevice(deviceToken: RemObjects.SDK.Types.Binary); virtual;
    end;
    
    
    CoApplePushProviderService = public class
    public 
        class method &Create(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel): IApplePushProviderService;
        class method &Create(remoteService: RemObjects.SDK.IRemoteService): IApplePushProviderService;
        class method &Create(uri: System.Uri): IApplePushProviderService;
        class method &Create(url: System.String): IApplePushProviderService;
    end;
    
    
    IApplePushProviderService_Async = public interface(RemObjects.SDK.IROService_Async)
        method BeginregisterDevice(deviceToken: RemObjects.SDK.Types.Binary; additionalInfo: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult;
        method EndregisterDevice(__AsyncResult: System.IAsyncResult);
        method registerDeviceAsync(deviceToken: RemObjects.SDK.Types.Binary; additionalInfo: System.String): System.Threading.Tasks.Task;
        method BeginunregisterDevice(deviceToken: RemObjects.SDK.Types.Binary; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult;
        method EndunregisterDevice(__AsyncResult: System.IAsyncResult);
        method unregisterDeviceAsync(deviceToken: RemObjects.SDK.Types.Binary): System.Threading.Tasks.Task;
    end;
    
    
    ApplePushProviderService_AsyncProxy = public partial class(RemObjects.SDK.AsyncProxy, IApplePushProviderService_Async)
    private 
        method get_InterfaceName: System.String;
    public 
        property InterfaceName: System.String read get_InterfaceName; override;
        constructor(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel);
        constructor(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel; interfaceName: System.String);
        constructor(remoteService: RemObjects.SDK.IRemoteService);
        constructor(remoteService: RemObjects.SDK.IRemoteService; interfaceName: System.String);
        constructor(uri: System.Uri);
        constructor(url: System.String);
        method BeginregisterDevice(deviceToken: RemObjects.SDK.Types.Binary; additionalInfo: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult; virtual;
        method EndregisterDevice(__AsyncResult: System.IAsyncResult); virtual;
        method registerDeviceAsync(deviceToken: RemObjects.SDK.Types.Binary; additionalInfo: System.String): System.Threading.Tasks.Task; virtual;
        method BeginunregisterDevice(deviceToken: RemObjects.SDK.Types.Binary; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult; virtual;
        method EndunregisterDevice(__AsyncResult: System.IAsyncResult); virtual;
        method unregisterDeviceAsync(deviceToken: RemObjects.SDK.Types.Binary): System.Threading.Tasks.Task; virtual;
    end;
    
    
    IGooglePushProviderService = public interface(RemObjects.SDK.IROService)
        method registerDevice(registrationId: System.String; additionalInfo: System.String);
        method unregisterDevice(registrationId: System.String);
    end;
    
    
    GooglePushProviderService_Proxy = public partial class(RemObjects.SDK.Proxy, IGooglePushProviderService)
    private 
        method get_InterfaceName: System.String;
    public 
        property InterfaceName: System.String read get_InterfaceName; override;
        constructor(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel);
        constructor(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel; interfaceName: System.String);
        constructor(remoteService: RemObjects.SDK.IRemoteService);
        constructor(remoteService: RemObjects.SDK.IRemoteService; interfaceName: System.String);
        constructor(uri: System.Uri);
        constructor(url: System.String);
        method registerDevice(registrationId: System.String; additionalInfo: System.String); virtual;
        method unregisterDevice(registrationId: System.String); virtual;
    end;
    
    
    CoGooglePushProviderService = public class
    public 
        class method &Create(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel): IGooglePushProviderService;
        class method &Create(remoteService: RemObjects.SDK.IRemoteService): IGooglePushProviderService;
        class method &Create(uri: System.Uri): IGooglePushProviderService;
        class method &Create(url: System.String): IGooglePushProviderService;
    end;
    
    
    IGooglePushProviderService_Async = public interface(RemObjects.SDK.IROService_Async)
        method BeginregisterDevice(registrationId: System.String; additionalInfo: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult;
        method EndregisterDevice(__AsyncResult: System.IAsyncResult);
        method registerDeviceAsync(registrationId: System.String; additionalInfo: System.String): System.Threading.Tasks.Task;
        method BeginunregisterDevice(registrationId: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult;
        method EndunregisterDevice(__AsyncResult: System.IAsyncResult);
        method unregisterDeviceAsync(registrationId: System.String): System.Threading.Tasks.Task;
    end;
    
    
    GooglePushProviderService_AsyncProxy = public partial class(RemObjects.SDK.AsyncProxy, IGooglePushProviderService_Async)
    private 
        method get_InterfaceName: System.String;
    public 
        property InterfaceName: System.String read get_InterfaceName; override;
        constructor(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel);
        constructor(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel; interfaceName: System.String);
        constructor(remoteService: RemObjects.SDK.IRemoteService);
        constructor(remoteService: RemObjects.SDK.IRemoteService; interfaceName: System.String);
        constructor(uri: System.Uri);
        constructor(url: System.String);
        method BeginregisterDevice(registrationId: System.String; additionalInfo: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult; virtual;
        method EndregisterDevice(__AsyncResult: System.IAsyncResult); virtual;
        method registerDeviceAsync(registrationId: System.String; additionalInfo: System.String): System.Threading.Tasks.Task; virtual;
        method BeginunregisterDevice(registrationId: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult; virtual;
        method EndunregisterDevice(__AsyncResult: System.IAsyncResult); virtual;
        method unregisterDeviceAsync(registrationId: System.String): System.Threading.Tasks.Task; virtual;
    end;
    
    
    IWindowsPhonePushProviderService = public interface(RemObjects.SDK.IROService)
        method RegisterDevice(deviceId: System.String; pushNotificationURI: System.String; osVersion: System.String; additionalInfo: System.String);
        method UnregisterDevice(deviceId: System.String);
    end;
    
    
    WindowsPhonePushProviderService_Proxy = public partial class(RemObjects.SDK.Proxy, IWindowsPhonePushProviderService)
    private 
        method get_InterfaceName: System.String;
    public 
        property InterfaceName: System.String read get_InterfaceName; override;
        constructor(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel);
        constructor(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel; interfaceName: System.String);
        constructor(remoteService: RemObjects.SDK.IRemoteService);
        constructor(remoteService: RemObjects.SDK.IRemoteService; interfaceName: System.String);
        constructor(uri: System.Uri);
        constructor(url: System.String);
        method RegisterDevice(deviceId: System.String; pushNotificationURI: System.String; osVersion: System.String; additionalInfo: System.String); virtual;
        method UnregisterDevice(deviceId: System.String); virtual;
    end;
    
    
    CoWindowsPhonePushProviderService = public class
    public 
        class method &Create(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel): IWindowsPhonePushProviderService;
        class method &Create(remoteService: RemObjects.SDK.IRemoteService): IWindowsPhonePushProviderService;
        class method &Create(uri: System.Uri): IWindowsPhonePushProviderService;
        class method &Create(url: System.String): IWindowsPhonePushProviderService;
    end;
    
    
    IWindowsPhonePushProviderService_Async = public interface(RemObjects.SDK.IROService_Async)
        method BeginRegisterDevice(deviceId: System.String; pushNotificationURI: System.String; osVersion: System.String; additionalInfo: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult;
        method EndRegisterDevice(__AsyncResult: System.IAsyncResult);
        method RegisterDeviceAsync(deviceId: System.String; pushNotificationURI: System.String; osVersion: System.String; additionalInfo: System.String): System.Threading.Tasks.Task;
        method BeginUnregisterDevice(deviceId: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult;
        method EndUnregisterDevice(__AsyncResult: System.IAsyncResult);
        method UnregisterDeviceAsync(deviceId: System.String): System.Threading.Tasks.Task;
    end;
    
    
    WindowsPhonePushProviderService_AsyncProxy = public partial class(RemObjects.SDK.AsyncProxy, IWindowsPhonePushProviderService_Async)
    private 
        method get_InterfaceName: System.String;
    public 
        property InterfaceName: System.String read get_InterfaceName; override;
        constructor(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel);
        constructor(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel; interfaceName: System.String);
        constructor(remoteService: RemObjects.SDK.IRemoteService);
        constructor(remoteService: RemObjects.SDK.IRemoteService; interfaceName: System.String);
        constructor(uri: System.Uri);
        constructor(url: System.String);
        method BeginRegisterDevice(deviceId: System.String; pushNotificationURI: System.String; osVersion: System.String; additionalInfo: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult; virtual;
        method EndRegisterDevice(__AsyncResult: System.IAsyncResult); virtual;
        method RegisterDeviceAsync(deviceId: System.String; pushNotificationURI: System.String; osVersion: System.String; additionalInfo: System.String): System.Threading.Tasks.Task; virtual;
        method BeginUnregisterDevice(deviceId: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult; virtual;
        method EndUnregisterDevice(__AsyncResult: System.IAsyncResult); virtual;
        method UnregisterDeviceAsync(deviceId: System.String): System.Threading.Tasks.Task; virtual;
    end;
    
implementation

{ ApplePushProviderService_Proxy }

method ApplePushProviderService_Proxy.get_InterfaceName: System.String;
begin
    exit('ApplePushProviderService');
end;

constructor ApplePushProviderService_Proxy(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel);
begin
    inherited constructor(message, clientChannel);
end;

constructor ApplePushProviderService_Proxy(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel; interfaceName: System.String);
begin
    inherited constructor(message, clientChannel, interfaceName);
end;

constructor ApplePushProviderService_Proxy(remoteService: RemObjects.SDK.IRemoteService);
begin
    inherited constructor(remoteService);
end;

constructor ApplePushProviderService_Proxy(remoteService: RemObjects.SDK.IRemoteService; interfaceName: System.String);
begin
    inherited constructor(remoteService, interfaceName);
end;

constructor ApplePushProviderService_Proxy(uri: System.Uri);
begin
    inherited constructor(uri);
end;

constructor ApplePushProviderService_Proxy(url: System.String);
begin
    inherited constructor(url);
end;

method ApplePushProviderService_Proxy.registerDevice(deviceToken: RemObjects.SDK.Types.Binary; additionalInfo: System.String);
begin
    var __LocalMessage: RemObjects.SDK.IMessage := self.__GetMessage();
    __LocalMessage.InitializeRequestMessage(ClientChannel, 'PushProvider', ActiveInterfaceName, 'registerDevice');
    __LocalMessage.Write('deviceToken', deviceToken, typeOf(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default);
    __LocalMessage.WriteUtf8String('additionalInfo', additionalInfo);
    __LocalMessage.FinalizeMessage();
    ClientChannel.Dispatch(__LocalMessage);
    __LocalMessage.Clear();
end;

method ApplePushProviderService_Proxy.unregisterDevice(deviceToken: RemObjects.SDK.Types.Binary);
begin
    var __LocalMessage: RemObjects.SDK.IMessage := self.__GetMessage();
    __LocalMessage.InitializeRequestMessage(ClientChannel, 'PushProvider', ActiveInterfaceName, 'unregisterDevice');
    __LocalMessage.Write('deviceToken', deviceToken, typeOf(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default);
    __LocalMessage.FinalizeMessage();
    ClientChannel.Dispatch(__LocalMessage);
    __LocalMessage.Clear();
end;

{ CoApplePushProviderService }

class method CoApplePushProviderService.&Create(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel): IApplePushProviderService;
begin
    exit(new ApplePushProviderService_Proxy(message, clientChannel));
end;

class method CoApplePushProviderService.&Create(remoteService: RemObjects.SDK.IRemoteService): IApplePushProviderService;
begin
    exit(new ApplePushProviderService_Proxy(remoteService));
end;

class method CoApplePushProviderService.&Create(uri: System.Uri): IApplePushProviderService;
begin
    exit(new ApplePushProviderService_Proxy(uri));
end;

class method CoApplePushProviderService.&Create(url: System.String): IApplePushProviderService;
begin
    exit(new ApplePushProviderService_Proxy(url));
end;

{ ApplePushProviderService_AsyncProxy }

method ApplePushProviderService_AsyncProxy.get_InterfaceName: System.String;
begin
    exit('ApplePushProviderService');
end;

constructor ApplePushProviderService_AsyncProxy(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel);
begin
    inherited constructor(message, clientChannel);
end;

constructor ApplePushProviderService_AsyncProxy(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel; interfaceName: System.String);
begin
    inherited constructor(message, clientChannel, interfaceName);
end;

constructor ApplePushProviderService_AsyncProxy(remoteService: RemObjects.SDK.IRemoteService);
begin
    inherited constructor(remoteService);
end;

constructor ApplePushProviderService_AsyncProxy(remoteService: RemObjects.SDK.IRemoteService; interfaceName: System.String);
begin
    inherited constructor(remoteService, interfaceName);
end;

constructor ApplePushProviderService_AsyncProxy(uri: System.Uri);
begin
    inherited constructor(uri);
end;

constructor ApplePushProviderService_AsyncProxy(url: System.String);
begin
    inherited constructor(url);
end;

method ApplePushProviderService_AsyncProxy.BeginregisterDevice(deviceToken: RemObjects.SDK.Types.Binary; additionalInfo: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult;
begin
    var __LocalMessage: RemObjects.SDK.IMessage := self.__GetMessage();
    __LocalMessage.InitializeRequestMessage(ClientChannel, 'PushProvider', ActiveInterfaceName, 'registerDevice');
    __LocalMessage.Write('deviceToken', deviceToken, typeOf(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default);
    __LocalMessage.WriteUtf8String('additionalInfo', additionalInfo);
    __LocalMessage.FinalizeMessage();
    exit(ClientChannel.AsyncDispatch(__LocalMessage, __Callback, __UserData));
end;

method ApplePushProviderService_AsyncProxy.EndregisterDevice(__AsyncResult: System.IAsyncResult);
begin
    var __LocalMessage: RemObjects.SDK.IMessage := (__AsyncResult as RemObjects.SDK.IClientAsyncResult).Message;
    __LocalMessage.Clear();
end;

method ApplePushProviderService_AsyncProxy.registerDeviceAsync(deviceToken: RemObjects.SDK.Types.Binary; additionalInfo: System.String): System.Threading.Tasks.Task;
begin
    exit(System.Threading.Tasks.Task.Factory.FromAsync(self.BeginregisterDevice(deviceToken, additionalInfo, nil, nil), new System.Action<System.IAsyncResult>(@self.EndregisterDevice)));
end;

method ApplePushProviderService_AsyncProxy.BeginunregisterDevice(deviceToken: RemObjects.SDK.Types.Binary; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult;
begin
    var __LocalMessage: RemObjects.SDK.IMessage := self.__GetMessage();
    __LocalMessage.InitializeRequestMessage(ClientChannel, 'PushProvider', ActiveInterfaceName, 'unregisterDevice');
    __LocalMessage.Write('deviceToken', deviceToken, typeOf(RemObjects.SDK.Types.Binary), RemObjects.SDK.StreamingFormat.Default);
    __LocalMessage.FinalizeMessage();
    exit(ClientChannel.AsyncDispatch(__LocalMessage, __Callback, __UserData));
end;

method ApplePushProviderService_AsyncProxy.EndunregisterDevice(__AsyncResult: System.IAsyncResult);
begin
    var __LocalMessage: RemObjects.SDK.IMessage := (__AsyncResult as RemObjects.SDK.IClientAsyncResult).Message;
    __LocalMessage.Clear();
end;

method ApplePushProviderService_AsyncProxy.unregisterDeviceAsync(deviceToken: RemObjects.SDK.Types.Binary): System.Threading.Tasks.Task;
begin
    exit(System.Threading.Tasks.Task.Factory.FromAsync(self.BeginunregisterDevice(deviceToken, nil, nil), new System.Action<System.IAsyncResult>(@self.EndunregisterDevice)));
end;

{ GooglePushProviderService_Proxy }

method GooglePushProviderService_Proxy.get_InterfaceName: System.String;
begin
    exit('GooglePushProviderService');
end;

constructor GooglePushProviderService_Proxy(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel);
begin
    inherited constructor(message, clientChannel);
end;

constructor GooglePushProviderService_Proxy(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel; interfaceName: System.String);
begin
    inherited constructor(message, clientChannel, interfaceName);
end;

constructor GooglePushProviderService_Proxy(remoteService: RemObjects.SDK.IRemoteService);
begin
    inherited constructor(remoteService);
end;

constructor GooglePushProviderService_Proxy(remoteService: RemObjects.SDK.IRemoteService; interfaceName: System.String);
begin
    inherited constructor(remoteService, interfaceName);
end;

constructor GooglePushProviderService_Proxy(uri: System.Uri);
begin
    inherited constructor(uri);
end;

constructor GooglePushProviderService_Proxy(url: System.String);
begin
    inherited constructor(url);
end;

method GooglePushProviderService_Proxy.registerDevice(registrationId: System.String; additionalInfo: System.String);
begin
    var __LocalMessage: RemObjects.SDK.IMessage := self.__GetMessage();
    __LocalMessage.InitializeRequestMessage(ClientChannel, 'PushProvider', ActiveInterfaceName, 'registerDevice');
    __LocalMessage.WriteAnsiString('registrationId', registrationId);
    __LocalMessage.WriteAnsiString('additionalInfo', additionalInfo);
    __LocalMessage.FinalizeMessage();
    ClientChannel.Dispatch(__LocalMessage);
    __LocalMessage.Clear();
end;

method GooglePushProviderService_Proxy.unregisterDevice(registrationId: System.String);
begin
    var __LocalMessage: RemObjects.SDK.IMessage := self.__GetMessage();
    __LocalMessage.InitializeRequestMessage(ClientChannel, 'PushProvider', ActiveInterfaceName, 'unregisterDevice');
    __LocalMessage.WriteAnsiString('registrationId', registrationId);
    __LocalMessage.FinalizeMessage();
    ClientChannel.Dispatch(__LocalMessage);
    __LocalMessage.Clear();
end;

{ CoGooglePushProviderService }

class method CoGooglePushProviderService.&Create(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel): IGooglePushProviderService;
begin
    exit(new GooglePushProviderService_Proxy(message, clientChannel));
end;

class method CoGooglePushProviderService.&Create(remoteService: RemObjects.SDK.IRemoteService): IGooglePushProviderService;
begin
    exit(new GooglePushProviderService_Proxy(remoteService));
end;

class method CoGooglePushProviderService.&Create(uri: System.Uri): IGooglePushProviderService;
begin
    exit(new GooglePushProviderService_Proxy(uri));
end;

class method CoGooglePushProviderService.&Create(url: System.String): IGooglePushProviderService;
begin
    exit(new GooglePushProviderService_Proxy(url));
end;

{ GooglePushProviderService_AsyncProxy }

method GooglePushProviderService_AsyncProxy.get_InterfaceName: System.String;
begin
    exit('GooglePushProviderService');
end;

constructor GooglePushProviderService_AsyncProxy(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel);
begin
    inherited constructor(message, clientChannel);
end;

constructor GooglePushProviderService_AsyncProxy(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel; interfaceName: System.String);
begin
    inherited constructor(message, clientChannel, interfaceName);
end;

constructor GooglePushProviderService_AsyncProxy(remoteService: RemObjects.SDK.IRemoteService);
begin
    inherited constructor(remoteService);
end;

constructor GooglePushProviderService_AsyncProxy(remoteService: RemObjects.SDK.IRemoteService; interfaceName: System.String);
begin
    inherited constructor(remoteService, interfaceName);
end;

constructor GooglePushProviderService_AsyncProxy(uri: System.Uri);
begin
    inherited constructor(uri);
end;

constructor GooglePushProviderService_AsyncProxy(url: System.String);
begin
    inherited constructor(url);
end;

method GooglePushProviderService_AsyncProxy.BeginregisterDevice(registrationId: System.String; additionalInfo: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult;
begin
    var __LocalMessage: RemObjects.SDK.IMessage := self.__GetMessage();
    __LocalMessage.InitializeRequestMessage(ClientChannel, 'PushProvider', ActiveInterfaceName, 'registerDevice');
    __LocalMessage.WriteAnsiString('registrationId', registrationId);
    __LocalMessage.WriteAnsiString('additionalInfo', additionalInfo);
    __LocalMessage.FinalizeMessage();
    exit(ClientChannel.AsyncDispatch(__LocalMessage, __Callback, __UserData));
end;

method GooglePushProviderService_AsyncProxy.EndregisterDevice(__AsyncResult: System.IAsyncResult);
begin
    var __LocalMessage: RemObjects.SDK.IMessage := (__AsyncResult as RemObjects.SDK.IClientAsyncResult).Message;
    __LocalMessage.Clear();
end;

method GooglePushProviderService_AsyncProxy.registerDeviceAsync(registrationId: System.String; additionalInfo: System.String): System.Threading.Tasks.Task;
begin
    exit(System.Threading.Tasks.Task.Factory.FromAsync(self.BeginregisterDevice(registrationId, additionalInfo, nil, nil), new System.Action<System.IAsyncResult>(@self.EndregisterDevice)));
end;

method GooglePushProviderService_AsyncProxy.BeginunregisterDevice(registrationId: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult;
begin
    var __LocalMessage: RemObjects.SDK.IMessage := self.__GetMessage();
    __LocalMessage.InitializeRequestMessage(ClientChannel, 'PushProvider', ActiveInterfaceName, 'unregisterDevice');
    __LocalMessage.WriteAnsiString('registrationId', registrationId);
    __LocalMessage.FinalizeMessage();
    exit(ClientChannel.AsyncDispatch(__LocalMessage, __Callback, __UserData));
end;

method GooglePushProviderService_AsyncProxy.EndunregisterDevice(__AsyncResult: System.IAsyncResult);
begin
    var __LocalMessage: RemObjects.SDK.IMessage := (__AsyncResult as RemObjects.SDK.IClientAsyncResult).Message;
    __LocalMessage.Clear();
end;

method GooglePushProviderService_AsyncProxy.unregisterDeviceAsync(registrationId: System.String): System.Threading.Tasks.Task;
begin
    exit(System.Threading.Tasks.Task.Factory.FromAsync(self.BeginunregisterDevice(registrationId, nil, nil), new System.Action<System.IAsyncResult>(@self.EndunregisterDevice)));
end;

{ WindowsPhonePushProviderService_Proxy }

method WindowsPhonePushProviderService_Proxy.get_InterfaceName: System.String;
begin
    exit('WindowsPhonePushProviderService');
end;

constructor WindowsPhonePushProviderService_Proxy(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel);
begin
    inherited constructor(message, clientChannel);
end;

constructor WindowsPhonePushProviderService_Proxy(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel; interfaceName: System.String);
begin
    inherited constructor(message, clientChannel, interfaceName);
end;

constructor WindowsPhonePushProviderService_Proxy(remoteService: RemObjects.SDK.IRemoteService);
begin
    inherited constructor(remoteService);
end;

constructor WindowsPhonePushProviderService_Proxy(remoteService: RemObjects.SDK.IRemoteService; interfaceName: System.String);
begin
    inherited constructor(remoteService, interfaceName);
end;

constructor WindowsPhonePushProviderService_Proxy(uri: System.Uri);
begin
    inherited constructor(uri);
end;

constructor WindowsPhonePushProviderService_Proxy(url: System.String);
begin
    inherited constructor(url);
end;

method WindowsPhonePushProviderService_Proxy.RegisterDevice(deviceId: System.String; pushNotificationURI: System.String; osVersion: System.String; additionalInfo: System.String);
begin
    var __LocalMessage: RemObjects.SDK.IMessage := self.__GetMessage();
    __LocalMessage.InitializeRequestMessage(ClientChannel, 'PushProvider', ActiveInterfaceName, 'RegisterDevice');
    __LocalMessage.WriteAnsiString('deviceId', deviceId);
    __LocalMessage.WriteAnsiString('pushNotificationURI', pushNotificationURI);
    __LocalMessage.WriteAnsiString('osVersion', osVersion);
    __LocalMessage.WriteAnsiString('additionalInfo', additionalInfo);
    __LocalMessage.FinalizeMessage();
    ClientChannel.Dispatch(__LocalMessage);
    __LocalMessage.Clear();
end;

method WindowsPhonePushProviderService_Proxy.UnregisterDevice(deviceId: System.String);
begin
    var __LocalMessage: RemObjects.SDK.IMessage := self.__GetMessage();
    __LocalMessage.InitializeRequestMessage(ClientChannel, 'PushProvider', ActiveInterfaceName, 'UnregisterDevice');
    __LocalMessage.WriteAnsiString('deviceId', deviceId);
    __LocalMessage.FinalizeMessage();
    ClientChannel.Dispatch(__LocalMessage);
    __LocalMessage.Clear();
end;

{ CoWindowsPhonePushProviderService }

class method CoWindowsPhonePushProviderService.&Create(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel): IWindowsPhonePushProviderService;
begin
    exit(new WindowsPhonePushProviderService_Proxy(message, clientChannel));
end;

class method CoWindowsPhonePushProviderService.&Create(remoteService: RemObjects.SDK.IRemoteService): IWindowsPhonePushProviderService;
begin
    exit(new WindowsPhonePushProviderService_Proxy(remoteService));
end;

class method CoWindowsPhonePushProviderService.&Create(uri: System.Uri): IWindowsPhonePushProviderService;
begin
    exit(new WindowsPhonePushProviderService_Proxy(uri));
end;

class method CoWindowsPhonePushProviderService.&Create(url: System.String): IWindowsPhonePushProviderService;
begin
    exit(new WindowsPhonePushProviderService_Proxy(url));
end;

{ WindowsPhonePushProviderService_AsyncProxy }

method WindowsPhonePushProviderService_AsyncProxy.get_InterfaceName: System.String;
begin
    exit('WindowsPhonePushProviderService');
end;

constructor WindowsPhonePushProviderService_AsyncProxy(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel);
begin
    inherited constructor(message, clientChannel);
end;

constructor WindowsPhonePushProviderService_AsyncProxy(message: RemObjects.SDK.IMessage; clientChannel: RemObjects.SDK.IClientChannel; interfaceName: System.String);
begin
    inherited constructor(message, clientChannel, interfaceName);
end;

constructor WindowsPhonePushProviderService_AsyncProxy(remoteService: RemObjects.SDK.IRemoteService);
begin
    inherited constructor(remoteService);
end;

constructor WindowsPhonePushProviderService_AsyncProxy(remoteService: RemObjects.SDK.IRemoteService; interfaceName: System.String);
begin
    inherited constructor(remoteService, interfaceName);
end;

constructor WindowsPhonePushProviderService_AsyncProxy(uri: System.Uri);
begin
    inherited constructor(uri);
end;

constructor WindowsPhonePushProviderService_AsyncProxy(url: System.String);
begin
    inherited constructor(url);
end;

method WindowsPhonePushProviderService_AsyncProxy.BeginRegisterDevice(deviceId: System.String; pushNotificationURI: System.String; osVersion: System.String; additionalInfo: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult;
begin
    var __LocalMessage: RemObjects.SDK.IMessage := self.__GetMessage();
    __LocalMessage.InitializeRequestMessage(ClientChannel, 'PushProvider', ActiveInterfaceName, 'RegisterDevice');
    __LocalMessage.WriteAnsiString('deviceId', deviceId);
    __LocalMessage.WriteAnsiString('pushNotificationURI', pushNotificationURI);
    __LocalMessage.WriteAnsiString('osVersion', osVersion);
    __LocalMessage.WriteAnsiString('additionalInfo', additionalInfo);
    __LocalMessage.FinalizeMessage();
    exit(ClientChannel.AsyncDispatch(__LocalMessage, __Callback, __UserData));
end;

method WindowsPhonePushProviderService_AsyncProxy.EndRegisterDevice(__AsyncResult: System.IAsyncResult);
begin
    var __LocalMessage: RemObjects.SDK.IMessage := (__AsyncResult as RemObjects.SDK.IClientAsyncResult).Message;
    __LocalMessage.Clear();
end;

method WindowsPhonePushProviderService_AsyncProxy.RegisterDeviceAsync(deviceId: System.String; pushNotificationURI: System.String; osVersion: System.String; additionalInfo: System.String): System.Threading.Tasks.Task;
begin
    exit(System.Threading.Tasks.Task.Factory.FromAsync(self.BeginRegisterDevice(deviceId, pushNotificationURI, osVersion, additionalInfo, nil, nil), new System.Action<System.IAsyncResult>(@self.EndRegisterDevice)));
end;

method WindowsPhonePushProviderService_AsyncProxy.BeginUnregisterDevice(deviceId: System.String; __Callback: System.AsyncCallback; __UserData: System.Object): System.IAsyncResult;
begin
    var __LocalMessage: RemObjects.SDK.IMessage := self.__GetMessage();
    __LocalMessage.InitializeRequestMessage(ClientChannel, 'PushProvider', ActiveInterfaceName, 'UnregisterDevice');
    __LocalMessage.WriteAnsiString('deviceId', deviceId);
    __LocalMessage.FinalizeMessage();
    exit(ClientChannel.AsyncDispatch(__LocalMessage, __Callback, __UserData));
end;

method WindowsPhonePushProviderService_AsyncProxy.EndUnregisterDevice(__AsyncResult: System.IAsyncResult);
begin
    var __LocalMessage: RemObjects.SDK.IMessage := (__AsyncResult as RemObjects.SDK.IClientAsyncResult).Message;
    __LocalMessage.Clear();
end;

method WindowsPhonePushProviderService_AsyncProxy.UnregisterDeviceAsync(deviceId: System.String): System.Threading.Tasks.Task;
begin
    exit(System.Threading.Tasks.Task.Factory.FromAsync(self.BeginUnregisterDevice(deviceId, nil, nil), new System.Action<System.IAsyncResult>(@self.EndUnregisterDevice)));
end;

end.
