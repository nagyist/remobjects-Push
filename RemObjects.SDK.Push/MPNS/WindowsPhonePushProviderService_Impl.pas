//------------------------------------------------------------------------------
// <autogenerated>
//     This Oxygene source code was generated by a tool.
//     Runtime Version: 4.0.30319.18052
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

{$HIDE H7}
{$HIDE W1}
{$HIDE W27}
{$HIDE H11}

namespace RemObjects.SDK.Push;

interface

uses
  System,
  System.IO,
  RemObjects.SDK,
  RemObjects.SDK.Types,
  RemObjects.SDK.Server,
  RemObjects.SDK.Server.ClassFactories;
  
type
  [RemObjects.SDK.Server.ClassFactories.StandardClassFactory]
  [RemObjects.SDK.Server.Service(Name := 'WindowsPhonePushProviderService', InvokerClass := typeOf(WindowsPhonePushProviderService_Invoker), ActivatorClass := typeOf(WindowsPhonePushProviderService_Activator))]
  WindowsPhonePushProviderService = public class(RemObjects.SDK.Server.Service, IWindowsPhonePushProviderService)
  private 
    method InitializeComponent;
    var components: System.ComponentModel.Container := nil;

  protected 
    method Dispose(aDisposing: System.Boolean); override;
  public 
    constructor;
    method RegisterDevice(deviceId: System.String; pushNotificationURI: System.String; osVersion: System.String; additionalInfo: System.String); virtual;
    method UnregisterDevice(deviceId: System.String); virtual;
  end;
  
implementation

{ WindowsPhonePushProviderService }

constructor WindowsPhonePushProviderService;
begin
  inherited constructor();
  self.InitializeComponent();
  self.RequireSession := PushManager.RequireSession;
end;

method WindowsPhonePushProviderService.InitializeComponent;
begin
end;

method WindowsPhonePushProviderService.Dispose(aDisposing: System.Boolean);
begin
  if aDisposing then begin
    if (self.components <> nil) then begin
      self.components.Dispose();
    end;
  end;
  inherited Dispose(aDisposing);
end;

method WindowsPhonePushProviderService.RegisterDevice(deviceId: System.String; pushNotificationURI: System.String; osVersion: System.String; additionalInfo: System.String);
begin
  try
    PushLog('Push(MPNS) registration for '+ deviceId);
    var lDevice: PushDeviceInfo;
    if PushManager.DeviceManager.TryGetDevice(deviceId, out lDevice) then begin
      PushLog('Push(MPNS) registration updated for '+ deviceId);

      WindowsPhonePushDeviceInfo(lDevice).NotificationURI := new Uri(pushNotificationURI);
      WindowsPhonePushDeviceInfo(lDevice).OSVersion := osVersion;
      PushManager.UpdateDevice(lDevice, additionalInfo);
      PushManager.Save;
    end
    else begin
      PushLog('Push(MPNS) registration new for '+ deviceId);
      var p := new WindowsPhonePushDeviceInfo(
                                       DeviceID := deviceId,
                                       NotificationURI := new Uri(pushNotificationURI),
                                       UserReference := iif(HasSession, Session['UserID']:ToString, nil),
                                       ClientInfo := additionalInfo, 
                                       ServerInfo := nil,
                                       LastSeen := DateTime.Now);
      p.OSVersion := osVersion;
      PushManager.AddDevice(p);      
      PushManager.Save;
    end;
  except
    on E:Exception do begin
      PushLog(E.Message);
      PushLog(E.StackTrace);
    end;
  end;
end;

method WindowsPhonePushProviderService.UnregisterDevice(deviceId: System.String);
begin
  if (PushManager.RemoveDevice(deviceId)) then
    PushManager.Save;
end;

end.
